#!/usr/bin/env perl 

use strict;
use warnings;

use Getopt::Std;
use LWP::UserAgent;
use HTTP::Cookies;
use Encode::Guess;
use File::Temp qw'tempfile';
use File::Copy qw'move';
use File::Basename qw'fileparse';
use HTML::Entities;

my $VERSION = "1.3";
( my $PROGNAME = $0 ) =~ s/.*\///;

sub VERSION_MESSAGE
{
    PrintUsage();
    exit 0;
}

sub PrintUsage
{
    print "$PROGNAME, version $VERSION\n";
    print "\nUsage: $PROGNAME -i project-id -u user -p password";
    print "\n            [-s] [-n date-time] [-b pre-suffix] [-x] <file.csv>\n";
    print "\t-i - project id\n";
    print "\t-u - user name\n";
    print "\t-p - password\n";
    print "\t-s - connect securely via https\n";
    print "\t-n - test only records newer than the given date-time\n";
    print "\t     date-time format is 'YYYY-MM-DD HH:MM:SS'\n";
    print "\t-b - create backup file with the given pre-suffix\n";
    print "\t-x - read in XLSX data\n";
}

my $DLINK_PTN = qr'<a\s+href="([^"]+)"\s*>Download Log as CSV file<'i;
my $DTIME_PTN = qr'^"([^"]+)".*';

our ( $opt_h, $opt_i, $opt_u, $opt_p, $opt_s, $opt_n, $opt_b, $opt_x );

getopts 'hi:u:p:sb:n:x';
my $datafile = shift;

if ( $opt_h || ! $opt_i || ! $opt_u || ! $opt_p || ! $datafile )
{
    PrintUsage;
    exit( $opt_h ? 0 : 1 );
}

die 'Insecure connection is deprecated, use option -s to connect securely'
                                                                unless $opt_s;

$DLINK_PTN =~ s/CSV file/XLSX file for Excel/ if $opt_x;

my $project_id  = $opt_i;
my $user        = $opt_u;
my $password    = $opt_p;
my $http_proto  = $opt_s ? 'https' : 'http';
my $statcounter = $http_proto . '://statcounter.com/';

my $ua = LWP::UserAgent->new( cookie_jar            => HTTP::Cookies->new,
                              requests_redirectable => [ 'GET', 'POST' ] );

my $url = $statcounter . $project_id . '/download_log/';
my $response = $ua->post( $url, [ form_user => $user,
                                  form_pass => $password ] );

die $response->status_line unless $response->is_success;

my $content = $response->decoded_content();

die 'Failed to find download link' unless $content =~ $DLINK_PTN;

( $url = $1 ) =~ s/^\.\./$statcounter . $project_id/e;

$response = $ua->get( $url );

$content = $response->decoded_content();

if ( $opt_x )
{
    require Spreadsheet::XLSX;

    my ( $name, $path, $suf ) = fileparse( $datafile, qr'\.[^.]+$' );
    my $xlsx = $path . $name . '.xlsx';
    open my $fh, '>', $xlsx or die $!;
    binmode $fh, ':raw';
    print $fh $content;
    close $fh;

    # FIXME: this may require a character converter (passed in the second arg)!
    my $excel = Spreadsheet::XLSX->new( $xlsx );
    $content = '';

    for my $sheet ( @{ $excel->{ Worksheet } } )
    {
        next unless $sheet->{ Name } eq "Sheet1";
        $sheet->{ MaxRow } ||= $sheet->{ MinRow };
        for my $row ( $sheet->{ MinRow } .. $sheet->{ MaxRow } )
        {
            $sheet->{ MaxCol } ||= $sheet->{ MinCol };
            my $i = 0;
            for my $col ( $sheet->{ MinCol } .. $sheet->{ MaxCol } )
            {
                my $cell = $sheet->{ Cells }[ $row ][ $col ];
                my $comma = $i++ == 0 ? '' : ',';
                $content .= $comma . '"' .
                        decode_entities( $cell ? $cell->{ Val } : '' ) . '"';
            }
            $content .= "\n";
        }
    }
}
else
{
    my $enc = guess_encoding( $content );
    die 'Unrecognized data encoding' unless ref $enc;
    $content = $enc->decode( $content ) unless $enc->name eq 'utf8';
}

unless ( -e $datafile )
{
    open my $fh, '>', $datafile or die $!;
    binmode $fh, ':raw';
    print $fh $content;
    close $fh;
    exit 0;
}

die 'Data file is not writable' unless -w $datafile;

my ( $fh, $tmpfile ) = tempfile( UNLINK => 1, SUFFIX => '.csv' );
binmode $fh, ':raw';
print $fh $content;
close $fh;

open my $fh1, '<', $tmpfile or die $!;
open my $fh2, '<', $datafile or die $!;
( $fh, $tmpfile ) = tempfile( UNLINK => 0, SUFFIX => '.csv' );
binmode $fh, ':raw';

my $hdr = <$fh1>;
$hdr = <$fh2>;
die 'Bad data format' unless $hdr =~ qr'^\s*"Date and Time"';
print $fh $hdr;

my ( $read1, $read2 ) = ( 1, 1 );
my ( $l1, $l2 ) = ( '', '' );
my $dstop = 0;

do
{
    $l1 = undef if $dstop;
    if ( defined $l1 && defined $l2 )
    {
        $l1 = <$fh1> if $read1;
        my $d1 = '';
        if ( defined $l1 )
        {
            ( $d1 = $l1 ) =~ s/$DTIME_PTN/$1/;
            chomp $d1;
            die 'Corrupted data' if $d1 eq '';
            $dstop = defined $opt_n && $opt_n ge $d1;
        }
        $l2 = <$fh2> if $read2;
        if ( defined $l1 && defined $l2 )
        {
            if ( $l1 eq $l2 )
            {
                print $fh $l1;
                $read1 = 1;
                $read2 = 1;
            }
            else
            {
                ( my $d2 = $l2 ) =~ s/$DTIME_PTN/$1/;
                chomp $d2;
                die 'Corrupted data' if $d2 eq '';
                if ( $d1 ge $d2 )
                {
                    print $fh ( $dstop ? $l2 : $l1 );
                    $read1 = 1;
                    $read2 = 0;
                }
                else
                {
                    print $fh $l2;
                    $read1 = 0;
                    $read2 = 1;
                }
            }
        }
        else
        {
            print $fh $l1 if defined $l1 && ! $dstop;
            print $fh $l2 if defined $l2;
        }
    }
    elsif ( defined $l1 )
    {
        $l1 = <$fh1>;
        if ( defined $l1 )
        {
            ( my $d1 = $l1 ) =~ s/$DTIME_PTN/$1/;
            chomp $d1;
            die 'Corrupted data' if $d1 eq '';
            $dstop = defined $opt_n && $opt_n ge $d1;
            print $fh $l1 unless $dstop;
        }
    }
    elsif ( defined $l2 )
    {
        $l2 = <$fh2>;
        print $fh $l2 if defined $l2;
    }
} while ( defined $l1 || defined $l2 );

close $_ for ( $fh, $fh1, $fh2 );

if ( $opt_b )
{
    my ( $name, $path, $suf ) = fileparse( $datafile, qr'\.[^.]+$' );
    move $datafile, $path . $name . $opt_b . $suf or
                                        warn 'Failed to create backup file';
}

move $tmpfile, $datafile or die $!;

